set -g  prefix M-t
set -g  history-limit 50000
set -g  mouse on
set -gs escape-time 1
set -g  base-index 1
set -g  pane-base-index 1
set -g  wrap-search off

set -g bell-action none
set -g pane-active-border-style fg=magenta
set -g status-style bg=magenta,fg=black
set -g mode-keys vi

set -g  prefix M-t

unbind -a -T root
unbind -a -T prefix
unbind -a -T copy-mode-vi

# for nested tmux on a remote server
bind -n M-T send-prefix

# Navigation
bind r select-pane -U
bind h select-pane -D
bind s select-pane -L
bind t select-pane -R
bind M-t select-pane -t :.+

# Pane management
bind    - split-window -v -c "#{pane_current_path}"
bind    | split-window -h -c "#{pane_current_path}"
bind    = select-layout even-horizontal
bind    + select-layout tiled
bind    z resize-pane -Z
bind -r R resize-pane -U
bind -r H resize-pane -D
bind -r S resize-pane -L
bind -r T resize-pane -R

set-hook -g after-resize-pane {
  if -F "#{window_zoomed_flag}" {
    select-pane -P bg=black
  } {
    select-pane -P bg=default
  }
}

# Windows
bind c     new-window -a -t '{end}'
bind Tab   select-window -t +
bind Btab  select-window -t -
bind M-Tab choose-session
bind C     kill-window
bind 1     select-window -t 1
bind 2     select-window -t 2
bind 3     select-window -t 3
bind 4     select-window -t 4
bind 5     select-window -t 5
bind 6     select-window -t 6
bind 7     select-window -t 7
bind 8     select-window -t 8
bind 9     select-window -t 9

# Meta commands
bind M-r source-file ~/.tmux.conf \; display "reloaded"
bind M-q detach
bind   ? list-keys
bind C-z suspend-client
# bind   r respawn-pane -k
bind Enter command-prompt
bind Space copy-mode
bind Up copy-mode \; send -X scroll-up
bind S-Up copy-mode \; send -X halfpage-up

# jump to the previous prompt
bind -n M-Up {
  copy-mode

  send -X start-of-line
  # I use a non-breaking space because tmux trims trailing whitespace off of
  # scrollback lines. That means if you hit enter without typing anything,
  # you will have a line like "~/src ➜" in your scrollback buffer instead of
  # "~/src ➜ ". But the nbsp does not get chopped like this.
  send -X search-backward-text "➜\u00A0"

  # if we are on the very first prompt line, the search-backward-text will do
  # nothing, and we'll be stuck at the start-of-line. So we want to reposition
  # the cursor after the prompt unconditionally:
  send -X start-of-line
  send -X search-forward-text "➜\u00A0"

  # now we clear the search text
  send -X stop-selection

  # and then reposition the cursor to match the beginning of the text
  send -X -N 2 cursor-right
}

# jump to the next prompt
bind -n M-Down {
  copy-mode
  send -X search-forward-text "➜\u00A0"
  send -X stop-selection
  send -X -N 2 cursor-right
}

# select the "block" above the cursor, where "block" is either a command (text
# after a prompt) or a series of output lines (contiguous chunk of text with
# no prompt)
bind -n S-M-Up {
  copy-mode
  send -X clear-selection

  # Doing this twice in a row is code for "go to the start
  # of the soft-wrapped line." You cannot get the same effect
  # with -N 2. This effectively puts us at the start of the
  # current line, even if it is a command input that has wrapped
  # over the edge of the screen.
  send -X start-of-line
  send -X start-of-line

  send -X cursor-up
  send -X start-of-line
  send -X start-of-line

  # note that ${copy_cursor_line} is the displayed line, not the physical
  # line. so this won't detect that we're on a prompt in the case of a
  # partial line output right before us, or in the case that the arrow is
  # soft-wrapped to be on a new line
  if -F "#{m:*➜\u00A0*,#{copy_cursor_line}}" {
    # if you're on a prompt line, select the text after the prompt
    send -X search-forward-text "➜\u00A0"
    send -X stop-selection
    send -X -N 2 cursor-right
    send -X begin-selection
    # run it twice to handle soft-wrapped lines
    send -X end-of-line
    send -X end-of-line

    # remove this block in mode-keys emacs
    if "#{m:*➜\u00A0?*,#{copy_cursor_line}}" {
      send -X cursor-left
    }
  } {
    send -X end-of-line
    send -X end-of-line

    # on emacs, you have to move one more to the right to select the
    # newline character. this is not necessary in vi mode.
    # send -X cursor-right

    # yes, it would be nice to use select-line, but the trick to move by
    # physical lines doesn't work in visual line mode
    send -X begin-selection
    send -X search-backward-text "➜\u00A0"
    send -X end-of-line
    send -X end-of-line
    send -X cursor-right
    send -X stop-selection
  }
}

# select the "block" below the cursor
bind -n S-M-Down {
  copy-mode
  send -X clear-selection

  send -X end-of-line
  send -X end-of-line
  send -X cursor-right

  if -F "#{m:*➜\u00A0*,#{copy_cursor_line}}" {
    # if you are on a prompt line, select the text after the prompt
    send -X search-forward-text "➜\u00A0"
    send -X stop-selection
    send -X -N 2 cursor-right
    send -X begin-selection
    send -X end-of-line
    send -X end-of-line

    # remove this block in mode-keys emacs
    if "#{m:*➜\u00A0?*,#{copy_cursor_line}}" {
      send -X cursor-left # comment out this line in mode-keys emacs
    }
  } {
    # if you are not on a prompt line, you're on the first line of output
    send -X begin-selection
    send -X search-forward-text "➜\u00A0"
    send -X start-of-line
    send -X start-of-line

    # this is what you want to do in mode-keys vi:
    send -X cursor-left
    send -X stop-selection

    # but in mode-keys emacs you want to do this, to grab the trailing newline
    # but still leave your cursor positioned in the output, so that if you run
    # the command again it does the right thing:
    #
    # send -X stop-selection
    # send -X cursor-left
    #
    # Doing this demonstrates a strange bug in tmux's selection highlighting.
    # Even though the first character of the "next" line is *not* selected,
    # it still *renders* as if it's selected when you stop-selection and
    # reposition your cursor. I need to report/fix this. But it's late and
    # I'm lazy.
  }
}

bind -T copy-mode-vi y send -X copy-selection-no-clear
bind -T copy-mode-vi r send -X cursor-up
bind -T copy-mode-vi R send -X top-line
bind -T copy-mode-vi h send -X cursor-down
bind -T copy-mode-vi H send -X bottom-line
bind -T copy-mode-vi s send -X cursor-left
bind -T copy-mode-vi S send -X previous-word
bind -T copy-mode-vi t send -X cursor-right
bind -T copy-mode-vi T send -X next-word-end
bind -T copy-mode-vi w command-prompt -1 -p "(jump forward)"     { send -X jump-forward     "%%%" }
bind -T copy-mode-vi W command-prompt -1 -p "(jump to forward)"  { send -X jump-to-forward  "%%%" }
bind -T copy-mode-vi d command-prompt -1 -p "(jump backward)"    { send -X jump-backward    "%%%" }
bind -T copy-mode-vi D command-prompt -1 -p "(jump to backward)" { send -X jump-to-backward "%%%" }
bind -T copy-mode-vi Down send -X scroll-down
bind -T copy-mode-vi S-Down send -X halfpage-down
bind -T copy-mode-vi Up send -X scroll-up
bind -T copy-mode-vi S-Up send -X halfpage-up
bind -T copy-mode-vi g send -X end-of-line
bind -T copy-mode-vi G send -X history-bottom
bind -T copy-mode-vi a send -X start-of-line
bind -T copy-mode-vi A send -X history-top
bind -T copy-mode-vi v send -X rectangle-toggle
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi n send -X search-again
bind -T copy-mode-vi N send -X search-reverse
bind -T copy-mode-vi o send -X other-end
bind -T copy-mode-vi C-c send -X cancel
bind -T copy-mode-vi Enter  if -F "#{selection_present}" { send -X copy-selection-and-cancel } { send -X copy-line }
bind -T copy-mode-vi Escape if -F "#{selection_present}" { send -X clear-selection } { send -X cancel }
bind -T copy-mode-vi Space  if -F "#{selection_present}" { send -X clear-selection } { send -X begin-selection }
bind -T copy-mode-vi / command-prompt -i -p "(search down)" { send -X search-forward-incremental  "%%%" }
bind -T copy-mode-vi ? command-prompt -i -p "(search up)"   { send -X search-backward-incremental "%%%" }

# Restore unbound mouse commands
bind -T root MouseDown1Pane { select-pane -t =; send -M }
bind -n MouseDown1Status select-window -t =
bind -n MouseDown3Pane   if -F -t= "#{mouse_any_flag}" { select-pane -t=; send -M } { select-pane -mt= }
bind -n MouseDrag1Pane   if -F -t= "#{mouse_any_flag}" { if -Ft= "#{pane_in_mode}" { copy-mode -M } { send -M } } { copy-mode -M }
bind -n MouseDrag1Border resize-pane -M
bind -n WheelUpPane      if -F -t= "#{mouse_any_flag}" { send -M } { if -Ft= "#{pane_in_mode}" { send -M } { copy-mode -et= } }
bind -n WheelUpStatus    previous-window
bind -n WheelDownStatus  next-window

# Restores unbound copy-mode mouse commands
bind -T copy-mode-vi MouseDown1Pane    select-pane
bind -T copy-mode-vi MouseDrag1Pane    { select-pane; send -X begin-selection }
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-no-clear
bind -T copy-mode-vi WheelUpPane       { select-pane; send -X -N 5 scroll-up }
bind -T copy-mode-vi WheelDownPane     { select-pane; send -X -N 5 scroll-down }
bind -T copy-mode-vi DoubleClick1Pane  { select-pane; send -X select-word }
bind -T copy-mode-vi TripleClick1Pane  { select-pane; send -X select-line }
